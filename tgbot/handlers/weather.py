import json

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

from infrastructure.some_api.geo_api import YaGeoApi, YaGeoDto
from infrastructure.some_api.weather_api import YaWeatherApi, Coordinate, WeatherDto
from tgbot.config import load_config

weather_router = Router()

config = load_config()


async def get_weather_data(coordinate: Coordinate) -> tuple[WeatherDto, YaGeoDto]:
    if not config.weather or not config.geo:
        raise Exception
    weather_service = YaWeatherApi(api_key=config.weather.api_key)
    geo_service = YaGeoApi(api_key=config.geo.api_key)
    weather_data = await weather_service.get_weather(coordinate)
    defined_location = await geo_service.get_geo(coordinate)
    return weather_data, defined_location


@weather_router.message(F.location)
async def location_weather(message: Message, state: FSMContext):
    if message and message.location and config.geo and config.weather:
        location = message.location
        coordinates = Coordinate(longitude=location.longitude, latitude=location.latitude)
        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É
        serialized_coordinate = json.dumps(coordinates.__dict__)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data({'coordinates': serialized_coordinate})
        await get_weather_location(message, state)


@weather_router.message(Command('weather'))
async def get_weather_location(message: Message, state: FSMContext):
    user_data = await state.get_data()
    if user_data and message and user_data.get('coordinates'):
        coordinates: str = user_data['coordinates']
        # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç
        deserialized_dto: dict = json.loads(coordinates)
        coord_dto = Coordinate(latitude=deserialized_dto['latitude'], longitude=deserialized_dto['longitude'])
        [weather_data, defined_location] = await get_weather_data(coord_dto)

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardButton
        button_details = InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", url=weather_data.url)

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        markup = InlineKeyboardMarkup(inline_keyboard=[[button_details]])
        await message.reply(
            f"üß≠ {message.from_user.first_name}, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è: {defined_location.description}, {defined_location.name} \n"
            f"–ü–æ–≥–æ–¥–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç:\n"
            f"üå°Ô∏è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data.fact_temp},\n"
            f"üê± –ø–æ –æ—â—É—â–µ–Ω–∏—é: {weather_data.fact_feels_like},\n"
            f"‚òÄÔ∏è —É—Å–ª–æ–≤–∏—è: {weather_data.fact_condition}\n",
            reply_markup=markup)
    else:
        await message.reply(f"–°–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–∏ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, {message.from_user.first_name}")
